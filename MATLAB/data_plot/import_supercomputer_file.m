function supercomputerhistory = import_supercomputer_file(filename)
% Auto-generated by MATLAB on 2020/09/11 18:28:02

%% Initialize variables.
delimiter = ',';
startRow = 3;
endRow = Inf;
fprintf(1,' Reading file [%s] rows [%d]-[%d]...',filename,startRow,endRow) ;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,5]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,5]);
rawStringColumns = string(raw(:, [2,3,4,6]));


%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [1,2,4]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
supercomputerhistory.years = cell2mat(rawNumericColumns(:, 1));
supercomputerhistory.times = datetime(supercomputerhistory.years,7,1) ;
supercomputerhistory.Country = categorical(rawStringColumns(:, 1));
supercomputerhistory.Institution = categorical(rawStringColumns(:, 2));
supercomputerhistory.Machine_name = rawStringColumns(:, 3);
supercomputerhistory.Raw_speed = cell2mat(rawNumericColumns(:, 2));
supercomputerhistory.Speed_unit = categorical(rawStringColumns(:, 4));
supercomputerhistory.Speed_flops = supercomputerhistory.Raw_speed ;

for ee = 1:length(supercomputerhistory.times)
    switch(supercomputerhistory.Speed_unit(ee))
        case 'IPS'
            multiplier = 0.1 ;           % Assumes 1 floating point operation takes 10 instructions (assumption!  see: https://superuser.com/questions/488515/what-is-the-difference-similarity-between-mips-and-flops#:~:text=2%20Answers&text=mips%20talks%20about%20instructions%20which,both%20use%20different%20reference%20points.)
        case 'kIPS'
            multiplier = 1e2 ;
        case 'MIPS'
            multiplier = 1e5 ;
        case 'MFLOPS'               % See: https://en.wikipedia.org/wiki/FLOPS
            multiplier = 1e6 ;
        case 'GFLOPS'
            multiplier = 1e9 ;
        case 'TFLOPS'
            multiplier = 1e12 ;
        case 'PFLOPS'
            multiplier = 1e15 ;
        case 'EFLOPS'
            multiplier = 1e18 ;
    end % switch
    supercomputerhistory.Speed_flops(ee) = supercomputerhistory.Speed_flops(ee)*multiplier ;
end % ee

% For exponential fit
inds                                    = year(supercomputerhistory.times) > 1990 ;
supercomputerhistory.recent_times       = supercomputerhistory.times(      inds) ;
supercomputerhistory.recent_Speed_flops = supercomputerhistory.Speed_flops(inds) ;

supercomputerhistory.colour = [0.4940 0.1840 0.5560] ;

fprintf(1,'done.\n\n') ;
end